name: Analysis Tools Validation

on:
  push:
    branches: [main, dev, develop]
    paths:
      - 'tools/**'
      - 'config.py'
      - 'requirements.txt'
  pull_request:
    branches: [main, dev, develop]
    paths:
      - 'tools/**'
      - 'config.py'
      - 'requirements.txt'
  schedule:
    # Run weekly analysis tools validation
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - analysis-only

env:
  PYTHON_VERSION: '3.8'

jobs:
  analysis-tools-test:
    name: Analysis Tools Validation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Test analysis module imports
        run: |
          cd tools/analysis
          python -c "
          import sys
          import os
          sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath('.')))))

          try:
              import edp_optimizer
              print('✅ EDP optimizer imported successfully')
          except ImportError as e:
              print(f'❌ EDP optimizer import failed: {e}')
              sys.exit(1)

          try:
              import edp_summary_tables
              print('✅ EDP summary tables imported successfully')
          except ImportError as e:
              print(f'❌ EDP summary tables import failed: {e}')
              sys.exit(1)
          "

      - name: Test visualization module imports
        run: |
          cd tools/visualization
          python -c "
          import sys
          import os
          sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath('.')))))

          try:
              import visualize_edp_results
              print('✅ Visualize EDP results imported successfully')
          except ImportError as e:
              print(f'❌ Visualize EDP results import failed: {e}')
              sys.exit(1)

          try:
              import visualize_edp_summary
              print('✅ Visualize EDP summary imported successfully')
          except ImportError as e:
              print(f'❌ Visualize EDP summary import failed: {e}')
              sys.exit(1)
          "

      - name: Test data collection tools
        if: github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'analysis-only' || github.event.inputs.test_scope == ''
        run: |
          cd tools/data-collection
          python -c "
          import sys
          import os
          sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath('.')))))

          try:
              import profile
              print('✅ Profile module imported successfully')
          except ImportError as e:
              print(f'❌ Profile import failed: {e}')
              sys.exit(1)

          try:
              import profile_smi
              print('✅ Profile SMI module imported successfully')
          except ImportError as e:
              print(f'❌ Profile SMI import failed: {e}')
              sys.exit(1)
          "

      - name: Run analysis tool tests
        run: |
          cd tools/analysis

          # Test EDP optimizer with mock data
          python -c "
          import sys
          import os
          sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath('.')))))

          try:
              from edp_optimizer import EDPOptimizer
              optimizer = EDPOptimizer()
              print('✅ EDP optimizer can be instantiated')
          except Exception as e:
              print(f'⚠️ EDP optimizer instantiation failed: {e}')
          "

      - name: Test with sample configuration
        run: |
          # Test that tools can access configuration
          python -c "
          import sys
          import os
          sys.path.append('.')

          try:
              from config import GPUConfig
              print('✓ Configuration accessible from tools')

              # Test GPU configurations
              gpus = ['A100', 'V100', 'H100']
              for gpu in gpus:
                  try:
                      # Test accessing GPU-specific attributes
                      memory_freq = getattr(GPUConfig, f'{gpu}_MEMORY_FREQ', None)
                      core_freq = getattr(GPUConfig, f'{gpu}_DEFAULT_CORE_FREQ', None)
                      if memory_freq and core_freq:
                          print(f'✓ {gpu} configuration accessible (Memory: {memory_freq}MHz, Core: {core_freq}MHz)')
                      else:
                          print(f'⚠ {gpu} configuration incomplete')
                  except Exception as e:
                      print(f'⚠ {gpu} configuration failed: {e}')

          except ImportError as e:
              print(f'❌ Configuration import failed: {e}')
          "

      - name: Validate tools documentation
        run: |
          # Check that tools README exists and is not empty
          if [[ -f tools/README.md ]]; then
            if [[ -s tools/README.md ]]; then
              echo "✓ Tools README exists and is not empty"
              # Check for key sections
              if grep -q "Analysis" tools/README.md; then
                echo "✓ Analysis section found in tools README"
              fi
              if grep -q "Data Collection" tools/README.md; then
                echo "✓ Data Collection section found in tools README"
              fi
            else
              echo "⚠ Tools README is empty"
            fi
          else
            echo "⚠ Tools README not found"
          fi

      - name: Upload analysis validation artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: analysis-tools-validation-${{ github.run_number }}
          path: |
            tools/**/*.log
            tools/**/*.json
            tools/**/*.csv
          retention-days: 7
