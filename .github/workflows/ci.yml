name: Minimal CI

on:
  push:
    branches: [main, dev, develop]
  pull_request:
    branches: [main, dev, develop]

env:
  PYTHON_VERSION: '3.8'


jobs:
  lint:
    name: Pre-commit Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r requirements.txt

      - name: Run pre-commit
        run: pre-commit run --show-diff-on-failure --color=always

  # Ultra-fast essential checks only
  quick-test:
    name: Quick Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install essential tools
        run: |
          pip install --upgrade pip
          pip install black flake8 isort pytest coverage
          
      - name: Auto-fix formatting
        run: |
          black .
          isort .
          
      - name: Syntax check only
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
      - name: Install project dependencies
        run: pip install -r requirements.txt
        
      - name: Quick module test
        run: |
          python -c "from hardware.gpu_info import get_supported_gpus; print('✓ GPUs:', get_supported_gpus())"
          python -c "from config import GPUConfig; print('✓ Config loaded')"
          
      - name: Test tools directory
        run: |
          # Test analysis tools
          cd tools/analysis
          python -c "import edp_optimizer; print('✓ EDP optimizer loaded')"
          python -c "import edp_summary_tables; print('✓ EDP summary tables loaded')"
          
          # Test optimal frequency tools
          cd ../optimal-frequency
          python -c "import production_optimal_selector; print('✓ Production optimal selector loaded')"
          python -c "import comprehensive_optimal_selector; print('✓ Comprehensive optimal selector loaded')"
          
          # Test deployment tools
          cd ../deployment
          python -c "import deployment_interface; print('✓ Deployment interface loaded')"
          
          # Test utilities
          cd ../utilities
          python -c "import ai_optimization_workflow; print('✓ AI optimization workflow loaded')"
          
      - name: Test sample-collection-scripts framework
        run: |
          cd sample-collection-scripts
          # Test library loading
          bash -c "source lib/common.sh && echo '✓ Common library loaded'"
          bash -c "source lib/common.sh && source lib/gpu_config.sh && echo '✓ GPU config loaded'"
          # Test main script help
          ./launch_v2.sh --help > /dev/null && echo "✓ Main script functional"
          # Test configuration loading
          bash -c "source config/defaults.sh && echo '✓ Configuration loaded'"
          
      - name: Run tests
        run: |
          coverage run tests/run_tests.py
          coverage xml -o coverage.xml
          coverage html -d coverage_html
          bash tests/test_python_compatibility.sh
          
      - name: Validate version consistency
        run: |
          # Check that setup.py and README versions match
          SETUP_VERSION=$(python -c "import setup; print(setup.setup.__name__)" 2>/dev/null || python -c "
          import re
          with open('setup.py', 'r') as f:
              content = f.read()
              match = re.search(r'version=[\"\'](.*?)[\"\']', content)
              if match:
                  print(match.group(1))
              else:
                  print('unknown')
          ")
          
          README_VERSION=$(grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+" README.md | head -1 | sed 's/v//')
          
          echo "Setup.py version: $SETUP_VERSION"
          echo "README version: $README_VERSION"
          
          if [[ "$SETUP_VERSION" != "$README_VERSION" ]]; then
            echo "⚠ Version mismatch between setup.py ($SETUP_VERSION) and README.md ($README_VERSION)"
          else
            echo "✓ Version consistency verified"
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            coverage_html/
