name: CI Pipeline

on:
  push:
    branches: [main, dev, develop]
  pull_request:
    branches: [main, dev, develop]

env:
  PYTHON_VERSION: '3.8'


jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r requirements.txt

      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: --show-diff-on-failure --color=always

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run module import tests
        run: |
          python -c "from hardware.gpu_info import get_supported_gpus; print('✓ GPUs:', get_supported_gpus())"
          python -c "from config import GPUConfig; print('✓ Config loaded')"

      - name: Test tools directory
        run: |
          # Test analysis tools
          cd tools/analysis
          python -c "import edp_optimizer; print('✓ EDP optimizer loaded')"
          python -c "import edp_summary_tables; print('✓ EDP summary tables loaded')"

          # Test visualization tools
          cd visualization
          python -c "import visualize_edp_results; print('✓ Visualize EDP results loaded')"
          python -c "import visualize_edp_summary; print('✓ Visualize EDP summary loaded')"

          # Test data collection tools
          cd ../../data-collection
          python -c "import profile; print('✓ Profile module loaded')"
          python -c "import profile_smi; print('✓ Profile SMI module loaded')"

      - name: Test sample-collection-scripts framework
        run: |
          cd sample-collection-scripts
          # Test library loading
          if [ -f lib/common.sh ]; then
            bash -c "source lib/common.sh && echo '✓ Common library loaded'"
          fi
          if [ -f lib/gpu_config.sh ]; then
            bash -c "source lib/common.sh && source lib/gpu_config.sh && echo '✓ GPU config loaded'"
          fi
          # Test main script help (if it exists)
          if [ -f launch_v2.sh ]; then
            ./launch_v2.sh --help > /dev/null && echo "✓ Main script functional" || echo "ℹ Main script test skipped"
          fi
          # Test configuration loading
          if [ -f config/defaults.sh ]; then
            bash -c "source config/defaults.sh && echo '✓ Configuration loaded'"
          fi

      - name: Run pytest with coverage
        run: |
          coverage run -m pytest tests/ -v --tb=short --ignore=tests/test_llama_via_hf.py
          coverage xml -o coverage.xml
          coverage html -d coverage_html
          coverage report --show-missing

      - name: Run compatibility tests
        run: |
          bash tests/test_python_compatibility.sh

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            coverage_html/

  version-consistency:
    name: Version Consistency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate version consistency
        run: |
          # Check that setup.py and README versions match
          SETUP_VERSION=$(python -c "
          import re
          with open('setup.py', 'r') as f:
              content = f.read()
              match = re.search(r'version=[\"\'](.*?)[\"\']', content)
              if match:
                  print(match.group(1))
              else:
                  print('unknown')
          ")

          README_VERSION=$(python -c "
          import re
          with open('README.md', 'r') as f:
              content = f.read()
              # Look for version in 'Latest Updates' or similar patterns
              patterns = [
                  r'Latest Updates.*?v?(\d+\.\d+\.\d+)',
                  r'Version.*?v?(\d+\.\d+\.\d+)',
                  r'v(\d+\.\d+\.\d+)'
              ]
              for pattern in patterns:
                  match = re.search(pattern, content, re.IGNORECASE)
                  if match:
                      print(match.group(1))
                      break
              else:
                  print('unknown')
          ")

          echo "Setup.py version: $SETUP_VERSION"
          echo "README version: $README_VERSION"

          if [[ "$SETUP_VERSION" != "unknown" && "$README_VERSION" != "unknown" && "$SETUP_VERSION" != "$README_VERSION" ]]; then
            echo "❌ Version mismatch between setup.py ($SETUP_VERSION) and README.md ($README_VERSION)"
            exit 1
          else
            echo "✅ Version consistency verified"
          fi
