name: CI Pipeline

on:
  push:
    branches: [main, dev, develop]
  pull_request:
    branches: [main, dev, develop]
  schedule:
    # Run weekly to catch dependency issues
    - cron: '0 2 * * 1'

env:
  PYTHON_DEFAULT_VERSION: '3.11'
  CACHE_VERSION: 1


jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install security tools
        run: |
          pip install --upgrade pip
          pip install bandit[toml] safety pip-audit

      - name: Run Bandit security scan
        run: |
          bandit -r . -f sarif -o bandit-results.sarif || true
          bandit -r . --severity-level medium

      - name: Upload Bandit SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-results.sarif

      - name: Check dependencies for known vulnerabilities
        run: |
          pip-audit --requirement requirements.txt --format=sarif --output=pip-audit-results.sarif || true
          pip-audit --requirement requirements.txt

      - name: Upload pip-audit SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pip-audit-results.sarif

  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r requirements.txt

      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: --show-diff-on-failure --color=always

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run module import tests
        run: |
          python -c "from hardware.gpu_info import get_supported_gpus; print('✓ GPUs:', get_supported_gpus())"
          python -c "from config import GPUConfig; print('✓ Config loaded')"
          
      - name: Test tools directory
        run: |
          # Test analysis tools
          cd tools/analysis
          python -c "import edp_optimizer; print('✓ EDP optimizer loaded')"
          python -c "import edp_summary_tables; print('✓ EDP summary tables loaded')"
          
          # Test optimal frequency tools
          cd ../optimal-frequency
          python -c "import production_optimal_selector; print('✓ Production optimal selector loaded')"
          python -c "import comprehensive_optimal_selector; print('✓ Comprehensive optimal selector loaded')"
          
          # Test deployment tools
          cd ../deployment
          python -c "import deployment_interface; print('✓ Deployment interface loaded')"
          
          # Test utilities
          cd ../utilities
          python -c "import ai_optimization_workflow; print('✓ AI optimization workflow loaded')"
          
      - name: Test sample-collection-scripts framework
        run: |
          cd sample-collection-scripts
          # Test library loading
          bash -c "source lib/common.sh && echo '✓ Common library loaded'"
          bash -c "source lib/common.sh && source lib/gpu_config.sh && echo '✓ GPU config loaded'"
          # Test main script help
          ./launch_v2.sh --help > /dev/null && echo "✓ Main script functional"
          # Test configuration loading
          bash -c "source config/defaults.sh && echo '✓ Configuration loaded'"
          
      - name: Run pytest with coverage
        run: |
          coverage run -m pytest tests/ -v --tb=short
          coverage xml -o coverage.xml
          coverage html -d coverage_html
          coverage report --show-missing
          
      - name: Run compatibility tests
        run: |
          bash tests/test_python_compatibility.sh
          
      - name: Upload coverage to Codecov
        if: matrix.python-version == env.PYTHON_DEFAULT_VERSION
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        if: matrix.python-version == env.PYTHON_DEFAULT_VERSION
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            coverage_html/

  version-consistency:
    name: Version Consistency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          
      - name: Validate version consistency
        run: |
          # Check that setup.py and README versions match
          SETUP_VERSION=$(python -c "
          import re
          with open('setup.py', 'r') as f:
              content = f.read()
              match = re.search(r'version=[\"\'](.*?)[\"\']', content)
              if match:
                  print(match.group(1))
              else:
                  print('unknown')
          ")
          
          README_VERSION=$(grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+" README.md | head -1 | sed 's/v//' || echo "unknown")
          
          echo "Setup.py version: $SETUP_VERSION"
          echo "README version: $README_VERSION"
          
          if [[ "$SETUP_VERSION" != "unknown" && "$README_VERSION" != "unknown" && "$SETUP_VERSION" != "$README_VERSION" ]]; then
            echo "❌ Version mismatch between setup.py ($SETUP_VERSION) and README.md ($README_VERSION)"
            exit 1
          else
            echo "✅ Version consistency verified"
          fi

  package-build:
    name: Package Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          
      - name: Install build tools
        run: |
          pip install --upgrade pip build twine
          
      - name: Build package
        run: |
          python -m build
          
      - name: Check package
        run: |
          twine check dist/*
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
