"""
Frequency optimization algorithms and deployment tools.
"""

import pandas as pd
import numpy as np
import os
from typing import Dict, List, Tuple, Optional


def generate_deployment_script(optimal_df: pd.DataFrame, 
                             output_dir: str,
                             script_name: str = "deploy_frequencies.sh") -> str:
    """
    Generate deployment script for optimal frequency configurations.
    
    Args:
        optimal_df: DataFrame with optimal configurations
        output_dir: Output directory for script
        script_name: Name of deployment script
        
    Returns:
        Path to generated deployment script
    """
    script_path = os.path.join(output_dir, script_name)
    
    with open(script_path, 'w') as f:
        f.write("#!/bin/bash\n")
        f.write("# GPU Frequency Optimization Deployment Script\n")
        f.write("# Generated by GPU Frequency Optimization Framework\n\n")
        
        f.write("if [ $# -ne 2 ]; then\n")
        f.write('    echo "Usage: $0 <CONFIG> <ACTION>"\n')
        f.write('    echo "Available configurations:"\n')
        
        for _, config in optimal_df.iterrows():
            f.write(f'    echo "  {config["config"]} - {config["optimal_frequency"]}MHz"\n')
        
        f.write('    echo "Actions: deploy, status, reset"\n')
        f.write("    exit 1\n")
        f.write("fi\n\n")
        
        f.write("CONFIG=$1\nACTION=$2\n\n")
        
        # Generate configuration-specific deployment commands
        for _, config in optimal_df.iterrows():
            # Determine memory frequency based on GPU type
            if 'A100' in config['config']:
                mem_freq = 1215
            elif 'V100' in config['config']:
                mem_freq = 877
            else:
                mem_freq = 1215  # Default
            
            gpu_freq = int(config['optimal_frequency'])
            
            f.write(f'if [ "$CONFIG" = "{config["config"]}" ]; then\n')
            f.write(f'    case "$ACTION" in\n')
            f.write(f'        deploy)\n')
            f.write(f'            echo "Deploying {config["config"]}: {gpu_freq}MHz"\n')
            f.write(f'            echo "Expected: {config["performance_penalty"]:.1f}% performance impact, {config["energy_savings"]:.1f}% energy savings"\n')
            f.write(f'            echo "Efficiency ratio: {config["efficiency_ratio"]:.1f}:1"\n')
            f.write(f'            sudo nvidia-smi -ac {mem_freq},{gpu_freq}\n')
            f.write(f'            if [ $? -eq 0 ]; then\n')
            f.write(f'                echo "✅ Successfully deployed {config["config"]} configuration"\n')
            f.write(f'            else\n')
            f.write(f'                echo "❌ Failed to deploy configuration"\n')
            f.write(f'                exit 1\n')
            f.write(f'            fi\n')
            f.write(f'            ;;\n')
            f.write(f'        status)\n')
            f.write(f'            echo "Configuration: {config["config"]}"\n')
            f.write(f'            echo "Target GPU frequency: {gpu_freq}MHz"\n')
            f.write(f'            echo "Target memory frequency: {mem_freq}MHz"\n')
            f.write(f'            echo "Expected performance impact: {config["performance_penalty"]:.1f}%"\n')
            f.write(f'            echo "Expected energy savings: {config["energy_savings"]:.1f}%"\n')
            f.write(f'            echo "Current GPU status:"\n')
            f.write(f'            nvidia-smi --query-gpu=clocks.gr,clocks.mem,power.draw --format=csv\n')
            f.write(f'            ;;\n')
            f.write(f'        reset)\n')
            f.write(f'            echo "Resetting {config["config"]} to default frequencies"\n')
            f.write(f'            sudo nvidia-smi -rac\n')
            f.write(f'            if [ $? -eq 0 ]; then\n')
            f.write(f'                echo "✅ Successfully reset to default frequencies"\n')
            f.write(f'            else\n')
            f.write(f'                echo "❌ Failed to reset frequencies"\n')
            f.write(f'                exit 1\n')
            f.write(f'            fi\n')
            f.write(f'            ;;\n')
            f.write(f'        *)\n')
            f.write(f'            echo "Unknown action: $ACTION"\n')
            f.write(f'            echo "Available actions: deploy, status, reset"\n')
            f.write(f'            exit 1\n')
            f.write(f'            ;;\n')
            f.write(f'    esac\n')
            f.write(f'    exit 0\n')
            f.write(f'fi\n\n')
        
        f.write('echo "Unknown configuration: $CONFIG"\n')
        f.write('echo "Available configurations:"\n')
        for _, config in optimal_df.iterrows():
            f.write(f'echo "  {config["config"]}"\n')
        f.write('exit 1\n')
    
    # Make script executable
    os.chmod(script_path, 0o755)
    
    return script_path


def generate_validation_script(optimal_df: pd.DataFrame,
                             output_dir: str,
                             script_name: str = "validate_deployment.sh") -> str:
    """
    Generate validation script to verify deployment results.
    
    Args:
        optimal_df: DataFrame with optimal configurations
        output_dir: Output directory for script
        script_name: Name of validation script
        
    Returns:
        Path to generated validation script
    """
    script_path = os.path.join(output_dir, script_name)
    
    with open(script_path, 'w') as f:
        f.write("#!/bin/bash\n")
        f.write("# GPU Frequency Deployment Validation Script\n\n")
        
        f.write("echo 'GPU Frequency Deployment Validation'\n")
        f.write("echo '==================================='\n\n")
        
        f.write("# Check if nvidia-smi is available\n")
        f.write("if ! command -v nvidia-smi &> /dev/null; then\n")
        f.write('    echo "❌ nvidia-smi not found. Please install NVIDIA drivers."\n')
        f.write("    exit 1\n")
        f.write("fi\n\n")
        
        f.write("# Check current GPU frequencies\n")
        f.write('echo "Current GPU Status:"\n')
        f.write("nvidia-smi --query-gpu=index,name,clocks.gr,clocks.mem,power.draw,temperature.gpu --format=csv\n\n")
        
        f.write("# Check if any GPUs are available\n")
        f.write("GPU_COUNT=$(nvidia-smi --query-gpu=count --format=csv,noheader,nounits)\n")
        f.write("if [ $GPU_COUNT -eq 0 ]; then\n")
        f.write('    echo "❌ No GPUs detected"\n')
        f.write("    exit 1\n")
        f.write("fi\n\n")
        
        f.write('echo "Available Optimal Configurations:"\n')
        for _, config in optimal_df.iterrows():
            f.write(f'echo "  {config["config"]}: {config["optimal_frequency"]}MHz (Expected: {config["energy_savings"]:.1f}% energy savings)"\n')
        
        f.write('\necho ""\n')
        f.write('echo "To deploy a configuration, use:"\n')
        f.write('echo "  ./deploy_frequencies.sh <CONFIG> deploy"\n')
        f.write('echo ""\n')
        f.write('echo "To check status:"\n')
        f.write('echo "  ./deploy_frequencies.sh <CONFIG> status"\n')
        f.write('echo ""\n')
        f.write('echo "To reset to defaults:"\n')
        f.write('echo "  ./deploy_frequencies.sh <CONFIG> reset"\n')
    
    # Make script executable
    os.chmod(script_path, 0o755)
    
    return script_path


def create_optimization_report(efficiency_df: pd.DataFrame,
                             optimal_df: pd.DataFrame,
                             analysis_params: Dict,
                             output_dir: str,
                             report_name: str = "optimization_report.md") -> str:
    """
    Create detailed optimization report in Markdown format.
    
    Args:
        efficiency_df: DataFrame with all efficiency data
        optimal_df: DataFrame with optimal configurations
        analysis_params: Dictionary with analysis parameters
        output_dir: Output directory for report
        report_name: Name of report file
        
    Returns:
        Path to generated report
    """
    report_path = os.path.join(output_dir, report_name)
    
    with open(report_path, 'w') as f:
        f.write("# GPU Frequency Optimization Report\n\n")
        f.write("## Executive Summary\n\n")
        
        if len(optimal_df) > 0:
            avg_energy_savings = optimal_df['energy_savings'].mean()
            avg_performance_impact = optimal_df['performance_penalty'].abs().mean()
            best_efficiency = optimal_df['efficiency_ratio'].max()
            
            f.write(f"This analysis identified **{len(optimal_df)} optimal frequency configurations** ")
            f.write(f"that achieve an average of **{avg_energy_savings:.1f}% energy savings** ")
            f.write(f"with only **{avg_performance_impact:.1f}% average performance impact**.\n\n")
            
            f.write(f"- **Total configurations analyzed**: {len(efficiency_df)}\n")
            f.write(f"- **Optimal configurations found**: {len(optimal_df)}\n")
            f.write(f"- **Best efficiency ratio**: {best_efficiency:.1f}:1\n")
            f.write(f"- **Maximum degradation allowed**: {analysis_params.get('max_degradation', 'N/A')}%\n")
            f.write(f"- **Minimum efficiency required**: {analysis_params.get('min_efficiency', 'N/A')}:1\n\n")
        else:
            f.write("No optimal configurations were found with the specified criteria.\n\n")
        
        f.write("## Analysis Parameters\n\n")
        for key, value in analysis_params.items():
            f.write(f"- **{key.replace('_', ' ').title()}**: {value}\n")
        f.write("\n")
        
        if len(optimal_df) > 0:
            f.write("## Optimal Configurations\n\n")
            f.write("| Configuration | Frequency (MHz) | Performance Impact (%) | Energy Savings (%) | Efficiency Ratio | Category |\n")
            f.write("|---------------|-----------------|----------------------|-------------------|------------------|----------|\n")
            
            for _, config in optimal_df.iterrows():
                f.write(f"| {config['config']} | {config['optimal_frequency']:.0f} | ")
                f.write(f"{config['performance_penalty']:.1f} | {config['energy_savings']:.1f} | ")
                f.write(f"{config['efficiency_ratio']:.1f}:1 | {config['category']} |\n")
            
            f.write("\n## Deployment Instructions\n\n")
            f.write("### Quick Start\n\n")
            f.write("1. **Validate system**: `./validate_deployment.sh`\n")
            f.write("2. **Deploy configuration**: `./deploy_frequencies.sh <CONFIG> deploy`\n")
            f.write("3. **Check status**: `./deploy_frequencies.sh <CONFIG> status`\n")
            f.write("4. **Reset if needed**: `./deploy_frequencies.sh <CONFIG> reset`\n\n")
            
            f.write("### Recommended Deployment Order\n\n")
            
            # Sort by lowest performance impact first
            recommended_order = optimal_df.sort_values(['performance_penalty', 'efficiency_ratio'], 
                                                     ascending=[True, False])
            
            for i, (_, config) in enumerate(recommended_order.iterrows(), 1):
                f.write(f"{i}. **{config['config']}** ({config['optimal_frequency']:.0f}MHz)\n")
                f.write(f"   - Performance impact: {config['performance_penalty']:.1f}%\n")
                f.write(f"   - Energy savings: {config['energy_savings']:.1f}%\n")
                f.write(f"   - Command: `./deploy_frequencies.sh \"{config['config']}\" deploy`\n\n")
            
            f.write("## Expected Benefits\n\n")
            f.write("### Energy Efficiency\n")
            f.write(f"- **Average energy reduction**: {avg_energy_savings:.1f}%\n")
            f.write(f"- **Best configuration savings**: {optimal_df['energy_savings'].max():.1f}%\n")
            f.write(f"- **Typical efficiency ratio**: {optimal_df['efficiency_ratio'].median():.1f}:1\n\n")
            
            f.write("### Performance Impact\n")
            f.write(f"- **Average performance impact**: {avg_performance_impact:.1f}%\n")
            f.write(f"- **Best configuration impact**: {optimal_df['performance_penalty'].min():.1f}%\n")
            
            # Count configurations with performance improvements
            improvements = (optimal_df['performance_penalty'] < 0).sum()
            if improvements > 0:
                f.write(f"- **Configurations with performance improvements**: {improvements}/{len(optimal_df)}\n")
            
            f.write("\n")
        
        f.write("## Safety Considerations\n\n")
        f.write("- Always use `status` action to verify current frequencies before deployment\n")
        f.write("- Keep the `reset` option available to return to default frequencies\n")
        f.write("- Monitor system stability after deployment\n")
        f.write("- Test in non-production environment first\n\n")
        
        f.write("---\n")
        f.write("*Report generated by GPU Frequency Optimization Framework*\n")
    
    return report_path


def create_deployment_package(efficiency_df: pd.DataFrame,
                            optimal_df: pd.DataFrame,
                            analysis_params: Dict,
                            output_dir: str) -> List[str]:
    """
    Create complete deployment package with all necessary files.
    
    Args:
        efficiency_df: DataFrame with all efficiency data
        optimal_df: DataFrame with optimal configurations
        analysis_params: Dictionary with analysis parameters
        output_dir: Output directory for deployment package
        
    Returns:
        List of paths to generated files
    """
    generated_files = []
    
    if len(optimal_df) > 0:
        # Generate deployment script
        deploy_script = generate_deployment_script(optimal_df, output_dir)
        generated_files.append(deploy_script)
        
        # Generate validation script
        validation_script = generate_validation_script(optimal_df, output_dir)
        generated_files.append(validation_script)
        
        # Generate optimization report
        report = create_optimization_report(efficiency_df, optimal_df, analysis_params, output_dir)
        generated_files.append(report)
        
        # Save data files
        optimal_df.to_csv(os.path.join(output_dir, "optimal_configurations.csv"), index=False)
        generated_files.append(os.path.join(output_dir, "optimal_configurations.csv"))
        
        efficiency_df.to_csv(os.path.join(output_dir, "efficiency_analysis.csv"), index=False)
        generated_files.append(os.path.join(output_dir, "efficiency_analysis.csv"))
    
    return generated_files
