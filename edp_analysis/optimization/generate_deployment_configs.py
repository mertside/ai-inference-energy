#!/usr/bin/env python3
"""
Production Deployment Configuration Generator

Generates deployment-ready configurations from optimization results.
"""

import json
import pandas as pd
from pathlib import Path

def generate_deployment_configs():
    """Generate deployment configurations from optimization results."""
    
    # Load optimization results
    with open('production_optimization_results.json', 'r') as f:
        results = json.load(f)
    
    print("üöÄ Generating Production Deployment Configurations")
    print("=" * 60)
    
    deployment_configs = {
        'version': '1.0.0',
        'generated': pd.Timestamp.now().isoformat(),
        'methodology': 'Performance-constrained frequency optimization with warm-run data',
        'configurations': {}
    }
    
    # Process each optimized configuration
    for config_name, result in results['results'].items():
        if 'error' in result:
            print(f"‚ö†Ô∏è  Skipping {config_name}: {result['error']}")
            continue
        
        gpu = result['gpu']
        app = result['application']
        optimal_freq = result['optimal_frequency']
        baseline_freq = result['baseline_frequency']
        perf_penalty = result['performance_penalty'] * 100
        energy_savings = result['energy_savings'] * 100
        
        # Generate deployment command
        if gpu == 'A100':
            deploy_cmd = f"nvidia-smi -ac 1215,{optimal_freq}"
        elif gpu == 'V100':
            deploy_cmd = f"nvidia-smi -ac 877,{optimal_freq}"
        else:
            deploy_cmd = f"nvidia-smi -ac AUTO,{optimal_freq}"
        
        # Create configuration
        config = {
            'hardware': {
                'gpu_type': gpu,
                'application': app,
                'baseline_frequency': baseline_freq,
                'optimal_frequency': optimal_freq
            },
            'performance': {
                'penalty_percent': round(perf_penalty, 1),
                'category': result['penalty_category'],
                'acceptable': result['constraints_met']
            },
            'energy': {
                'savings_percent': round(energy_savings, 1),
                'power_savings_percent': round(result['power_savings'] * 100, 1)
            },
            'deployment': {
                'command': deploy_cmd,
                'validation': f"nvidia-smi --query-gpu=clocks.gr --format=csv,noheader,nounits | grep {optimal_freq}",
                'reset_command': deploy_cmd.replace(str(optimal_freq), str(baseline_freq))
            },
            'monitoring': {
                'key_metrics': ['GPU temperature', 'Application throughput', 'Power consumption'],
                'alerts': []
            }
        }
        
        # Add specific monitoring alerts
        if perf_penalty > 20:
            config['monitoring']['alerts'].append(f"Monitor user satisfaction - {perf_penalty:.1f}% performance impact")
        
        if result['penalty_category'] in ['marginal', 'poor']:
            config['monitoring']['alerts'].append("Consider A/B testing with baseline frequency")
        
        deployment_configs['configurations'][config_name] = config
        
        # Print summary
        print(f"‚úÖ {config_name}:")
        print(f"   Frequency: {baseline_freq} ‚Üí {optimal_freq} MHz")
        print(f"   Performance: {perf_penalty:+.1f}% penalty")
        print(f"   Energy: {energy_savings:.1f}% savings")
        print(f"   Command: {deploy_cmd}")
        print()
    
    # Save deployment configurations
    with open('production_deployment_configs.json', 'w') as f:
        json.dump(deployment_configs, f, indent=2)
    
    # Generate shell deployment script
    generate_deployment_script(deployment_configs)
    
    print(f"üì¶ Deployment configurations saved to: production_deployment_configs.json")
    print(f"üöÄ Deployment script saved to: deploy_frequencies.sh")
    
    return deployment_configs

def generate_deployment_script(configs):
    """Generate shell script for easy deployment."""
    
    script_lines = [
        "#!/bin/bash",
        "# GPU Frequency Deployment Script",
        "# Generated by AI Inference Energy Optimization Framework",
        f"# Date: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}",
        "",
        "set -e  # Exit on any error",
        "",
        "# Function to display usage",
        "usage() {",
        '    echo "Usage: $0 <gpu_type> <application> [action]"',
        '    echo "Actions: deploy (default), reset, status"',
        '    echo "Examples:"',
        '    echo "  $0 A100 LLAMA deploy"',
        '    echo "  $0 V100 STABLEDIFFUSION reset"',
        '    echo "  $0 A100 VIT status"',
        "    exit 1",
        "}",
        "",
        "# Check arguments",
        "if [ $# -lt 2 ]; then",
        "    usage",
        "fi",
        "",
        "GPU_TYPE=$1",
        "APPLICATION=$2",
        "ACTION=${3:-deploy}",
        "",
        "CONFIG_KEY=\"${GPU_TYPE}+${APPLICATION}\"",
        "",
        "# Configuration mappings",
        "case \"$CONFIG_KEY\" in"
    ]
    
    # Add configuration cases
    for config_name, config in configs['configurations'].items():
        optimal_freq = config['hardware']['optimal_frequency']
        baseline_freq = config['hardware']['baseline_frequency']
        deploy_cmd = config['deployment']['command']
        reset_cmd = config['deployment']['reset_command']
        
        script_lines.extend([
            f'    "{config_name}")',
            f'        OPTIMAL_FREQ={optimal_freq}',
            f'        BASELINE_FREQ={baseline_freq}',
            f'        DEPLOY_CMD="{deploy_cmd}"',
            f'        RESET_CMD="{reset_cmd}"',
            '        ;;'
        ])
    
    script_lines.extend([
        '    *)',
        '        echo "‚ùå Unsupported configuration: $CONFIG_KEY"',
        '        echo "Available configurations:"',
    ])
    
    # List available configurations
    for config_name in configs['configurations'].keys():
        script_lines.append(f'        echo "   {config_name}"')
    
    script_lines.extend([
        '        exit 1',
        '        ;;',
        'esac',
        '',
        '# Execute action',
        'case "$ACTION" in',
        '    "deploy")',
        '        echo "üöÄ Deploying optimal frequency for $CONFIG_KEY"',
        '        echo "Command: $DEPLOY_CMD"',
        '        if eval "$DEPLOY_CMD"; then',
        '            echo "‚úÖ Frequency deployed successfully"',
        '            echo "Current frequency: $(nvidia-smi --query-gpu=clocks.gr --format=csv,noheader,nounits) MHz"',
        '        else',
        '            echo "‚ùå Failed to deploy frequency"',
        '            exit 1',
        '        fi',
        '        ;;',
        '    "reset")',
        '        echo "üîÑ Resetting to baseline frequency for $CONFIG_KEY"',
        '        echo "Command: $RESET_CMD"',
        '        if eval "$RESET_CMD"; then',
        '            echo "‚úÖ Frequency reset successfully"',
        '            echo "Current frequency: $(nvidia-smi --query-gpu=clocks.gr --format=csv,noheader,nounits) MHz"',
        '        else',
        '            echo "‚ùå Failed to reset frequency"',
        '            exit 1',
        '        fi',
        '        ;;',
        '    "status")',
        '        echo "üìä Current status for $CONFIG_KEY:"',
        '        echo "GPU Type: $GPU_TYPE"',
        '        echo "Application: $APPLICATION"',
        '        echo "Optimal Frequency: ${OPTIMAL_FREQ} MHz"',
        '        echo "Baseline Frequency: ${BASELINE_FREQ} MHz"',
        '        echo "Current Frequency: $(nvidia-smi --query-gpu=clocks.gr --format=csv,noheader,nounits) MHz"',
        '        echo "GPU Temperature: $(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits)¬∞C"',
        '        echo "Power Usage: $(nvidia-smi --query-gpu=power.draw --format=csv,noheader,nounits)W"',
        '        ;;',
        '    *)',
        '        echo "‚ùå Unknown action: $ACTION"',
        '        usage',
        '        ;;',
        'esac'
    ])
    
    # Write script
    with open('deploy_frequencies.sh', 'w') as f:
        f.write('\n'.join(script_lines))
    
    # Make executable
    Path('deploy_frequencies.sh').chmod(0o755)

if __name__ == "__main__":
    generate_deployment_configs()
