# Pre-commit hooks for AI Inference Energy project
# Install with: pip install pre-commit && pre-commit install

repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: ['--maxkb=50000']  # Allow large model files up to 50MB
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-json
      - id: pretty-format-json
        args: ['--autofix']
      - id: check-toml
      - id: check-xml
      - id: debug-statements
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: fix-byte-order-marker
      - id: mixed-line-ending
      - id: requirements-txt-fixer

  - repo: https://github.com/psf/black
    rev: 24.4.2
    hooks:
      - id: black
        language_version: python3
        args: ['--line-length=127']

  - repo: https://github.com/PyCQA/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ['--profile=black', '--line-length=127']

  - repo: https://github.com/PyCQA/flake8
    rev: 7.1.0
    hooks:
      - id: flake8
        args: ['--max-line-length=127', '--max-complexity=10', '--extend-ignore=E203,W503']
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order

  # Commenting out mypy temporarily due to package name validation issues
  # - repo: https://github.com/pre-commit/mirrors-mypy
  #   rev: v1.10.1
  #   hooks:
  #     - id: mypy
  #       additional_dependencies: [types-requests, types-PyYAML, types-setuptools]
  #       args: ['--ignore-missing-imports', '--no-strict-optional', '--show-error-codes', '--namespace-packages']
  #       exclude: ^(sample-collection-scripts/|tests/|tools/data-collection/|app-.*/)
  #       files: ^(config\.py|utils\.py|hardware/.*\.py)$

  # Local custom hooks
  - repo: local
    hooks:
      - id: gpu-frequency-validation
        name: GPU Frequency Validation
        entry: python3
        language: python
        pass_filenames: false
        args:
          - -c
          - |
            from hardware.gpu_info import get_gpu_info
            for gpu in ['V100', 'A100', 'H100']:
                info = get_gpu_info(gpu)
                freqs = info.get_available_frequencies()
                assert all(f >= 510 for f in freqs), f"{gpu} has frequencies below 510 MHz"
                print(f"✅ {gpu}: {len(freqs)} frequencies validated")
        files: ^hardware/gpu_info\.py$

      - id: bash-syntax-check
        name: Bash Syntax Check
        entry: bash
        language: system
        args: ['-n']
        files: \.(sh|bash)$

      - id: check-version-consistency
        name: Check Version Consistency
        entry: python3
        language: python
        pass_filenames: false
        args:
          - -c
          - |
            import re

            # Read setup.py version
            try:
                with open('setup.py', 'r') as f:
                    setup_content = f.read()
                    setup_match = re.search(r'version=["\']([^"\']+)["\']', setup_content)
                    setup_version = setup_match.group(1) if setup_match else None
            except:
                setup_version = None

            # Read README version (look for "Latest Updates" or similar patterns)
            try:
                with open('README.md', 'r') as f:
                    readme_content = f.read()
                    # Look for version in "Latest Updates", "Version", or at the beginning
                    patterns = [
                        r'Latest Updates.*?v?(\d+\.\d+\.\d+)',
                        r'Version.*?v?(\d+\.\d+\.\d+)',
                        r'^.*v(\d+\.\d+\.\d+)',
                        r'v(\d+\.\d+\.\d+)'
                    ]
                    readme_version = None
                    for pattern in patterns:
                        readme_match = re.search(pattern, readme_content, re.IGNORECASE | re.MULTILINE)
                        if readme_match:
                            readme_version = readme_match.group(1)
                            break
            except:
                readme_version = None

            print(f"Setup.py version: {setup_version}")
            print(f"README version: {readme_version}")

            if setup_version and readme_version and setup_version != readme_version:
                print(f"❌ Version mismatch: setup.py ({setup_version}) vs README.md ({readme_version})")
                exit(1)
            else:
                print("✅ Version consistency verified")
        files: ^(setup\.py|README\.md)$
